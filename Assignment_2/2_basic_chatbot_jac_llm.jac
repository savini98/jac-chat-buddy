import:py random;
import:py uuid;
import:py re;
import:py from mtllm.llms, Groq;

glob llm = Groq(model_name = "llama3-8b-8192");

node user{
    has user_name:string="user";
}

walker query {
    #can go_to_router with session entry;
    has session_id : string =  '';
    has inquiry_by_user: string = '';
    has user_query : list=[]; 
    has user_data: 'data about the health status of the user' :dict={};
    has todo_list: 'The tasks to be done by the user in the future.' :list=[];


}
'''
Chat session of a user. This node contains the session_id, user_data and todo_list.
This should also include the chat history. Can have multiple chat sessions.
'''
node session{
    has session_id : string = '';
    has chat_history : list = [];
    has chat_file_name:string = 'chat';
    #has file:obj;
    has user_data : dict = {}; # User data such as habits, heart rate etc.
    has todo_list : list = []; # List of things to do by the user.
    can send_query_to_router with query entry;
    can end_seesion();
    #can seve_chat with query exit;
}

'''
Consists of user data such as age, pressure, married status.
'''
node data{
    has user_data:dict = {
                "age" : 0,
                "Pressure" : (0,0),
                "Married" : False
                };
}

'''
List of things to do by the user.
'''
node todo{
    
    has todo_list:list = [];
}

'''
This is the chat walker which will be used to chat with the user.
The create_session ability:
    - gather the user data and todo list from connected nodes using filters.
    - Creates a new session with the user data and todo list.
    - Spawns the chat session with the session id.
'''
walker chat{
    
    can create_session with user entry;
    can chat_session with session entry;
}
'''
This is where we create the graph.
'''
walker create_graph{
    has user_data:dict = {};
    has todo_list:list = [];
    can generate_graph with `root entry;
}

node router {
    has match:obj =  re.search(r'(@\w+)\s(.*)', '');
    can direct with query entry;
}
node RAG {
    has answer:string = '';
    can print_output with query entry;
}
node user_QA{
    has answer:string = '';
    can print_output with query entry;
    can 'You are a personal Assistant. Give a response based on the query using my todo list.'
    chat_llm(user_data:'data about the user':list,
             query:'The question the user has.':str) -> 'response':str by llm();
}
node user_TODO{
    has answer:string = '';
    can print_output with query entry;
    can 'You are a Health Assistant. Give a response based on the query using my todo list.'
    chat_llm(todo_list:'data about the health status of the user':list,
             query:'The tasks to be done by the user in the future.':str) -> 'response':str by llm();
}
with entry {
    create_graph(   user_data={ "age": 20,
                                "Pressure": (120, 80),
                                "Married": False
                            },
                     todo_list=["Do heart surgery",
                                "Buy Bread",
                                "Have pizza for dinner"]
                ) spawn root;
}